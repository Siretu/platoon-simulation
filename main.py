import cProfile
import time
import email_settings

from platooning.platooning_methods import GreedyPlatooning, RandomPlatooning, SubModularityPlatooning
from route_calculation import get_path_data_sets, generate_routes
from run_simulation import dynamic_simulation, average_fuel_savings
import matplotlib.pyplot as plt
import numpy as np


start = 0
pr = None
def setup():
    global start
    global pr
    start = time.time()
    # pr = cProfile.Profile()
    # pr.disable()
    # pr.enable()


def tear_down(result=0):
    # pr.disable()
    # pr.dump_stats("profile.pstat")
    t = time.time() - start
    print "%s: %.3f" % ("Time", t)
    # email_settings.mail("erikihr@gmail.com", "Simulation", "Total time: %f" % t)


def main():
    setup()
    # generate_routes(10000, './testing/testroutes/test10000-1/')
    # generate_routes(400, './testing/testroutes/test400-4/')
    # generate_routes(400, './testing/testroutes/test400-5/')
    # plot_fuel_models()
    # generate_routes(10000, './testing/testroutes/test10000-2/')
    # generate_routes(10000, './testing/testroutes/test10000-3/')
    # generate_routes(10000, './testing/testroutes/test10000-4/')
    # generate_routes(10000, './testing/testroutes/test10000-5/')
    # generate_routes(400, './testing/testroutes/test400-1/')
    # generate_routes(400, './testing/testroutes/test400-2/')
    # plot_clustering_savings_graph()
    # print plot_interval_graph()
    # print plot_horizon_graph()
    # result = average_fuel_savings(GreedyPlatooning(),['./testing/testroutes/test400-1/'])
    # print result
    # print clustering_data(testset="./testing/testroutes/test10000-%d/", nr=5)
    # print plot_expected_graph()
    # print average_fuel_savings(SubModularityPlatooning(False),['./testing/testroutes/test400-1/'], interval=600)
    result = dynamic_simulation(GreedyPlatooning(), folder='./testing/testroutes/test400-1/', interval=600)
    # plot_expected_graph()
    # print sum([x.current_fuel_consumption() for x in result]) / sum([x.default_plan.fuel for x in result])
    # plot_active_graph()
    # plot_horizon_graph()
    # plot_expected_graph()
    tear_down()


def clustering_data(testset="./testing/testroutes/test400-%d/", nr=5):
    fuel_savings = []
    for method in [GreedyPlatooning(), SubModularityPlatooning(True), SubModularityPlatooning(False)]:
        fuel_savings.append(average_fuel_savings(method,[testset % (x+1) for x in range(nr)], interval=600))
        print fuel_savings
        email_settings.mail("erikihr@gmail.com", "Partial results", str(fuel_savings))
    return fuel_savings


def horizon_data(testset="./testing/testroutes/test400-%d/", nr=5):
    total = []
    for method in [GreedyPlatooning()]:#, RandomPlatooning(0), SubModularityPlatooning(True), SubModularityPlatooning(False)]:
        fuel_savings = []
        for horizon in range(0, 7210, 300):
            print "%s: %d/7200" % (method, horizon)
            fuel_savings.append(average_fuel_savings(method, [testset % (x + 1) for x in range(nr)], horizon=horizon))
            print fuel_savings
            email_settings.mail("erikihr@gmail.com", "Partial results", str(fuel_savings))
        print fuel_savings
        total.append(fuel_savings)
    print total
    return total


def interval_data():
    total = []
    for method in [GreedyPlatooning(), RandomPlatooning(0), SubModularityPlatooning(True), SubModularityPlatooning(False)]:
        savings = []
        for interval in range(600, 14410, 600):
            print "%d/14400" % interval
            fuel_savings = average_fuel_savings(method,
                                                ['./testing/testroutes/test400-1/', './testing/testroutes/test400-2/',
                                                 './testing/testroutes/test400-3/', './testing/testroutes/test400-4/',
                                                 './testing/testroutes/test400-5/'], interval=interval)
            savings.append(fuel_savings)
            print fuel_savings
        total.append(savings)
    print total
    return total

def plot_fuel_models():
    f = [4.8*10**-5 + 8.4*10**-6*v for v in range(100)]
    fP = [8.5*10**-5 + 5*10**-6*v for v in range(100)]

    x = range(len(f))
    plt.plot(x, f)
    plt.plot(x, fP)
    plt.xlim([20,100])
    plt.xlabel("Speed (km/h)")
    plt.ylabel("Fuel")
    plt.legend(["Normal", "Platooning"])
    plt.yticks([],[])
    plt.show()

def plot_plan_fuel_over_time():
    data = [0.04257685171991539, 0.043240624726071999, 0.042726363999243497, 0.042461843775266205, 0.041792827797636156, 0.041120199915871056, 0.041999790590254646, 0.041253700563820606, 0.041890863284667089, 0.042822045450078727, 0.043330085501208628, 0.041593369411016656, 0.041235595812267788, 0.041579141839865039, 0.042234671565046636, 0.041690283970487643, 0.041440025488240793, 0.040767679356238332, 0.041271149742330128, 0.041111206360194094, 0.041338689270989756, 0.041211539802186482, 0.042289560909163734, 0.040935053585119709, 0.041917145340909956]

    x = range(len(data))
    plt.plot(x, data)
    plt.ylabel("Expected fuel saving")
    plt.xlabel("Time")
    plt.show()

def plot_expected_graph():
    data = [53873.657440730603, 53873.657440730603, 53873.657440730603, 53873.657440730603, 53873.657440730603, 53873.657440730603, 53873.657440730603, 53873.657440730603, 53872.379664897788, 53872.379664897788, 53872.379664897788, 53872.379664897788, 53872.379664897788, 53872.379664897788, 53851.970542722745, 53851.970542722745, 53841.257247676651, 53842.119397206159, 53842.119397206159, 53842.119397206159, 53842.119397206159, 53842.119397206159, 53842.119397206159, 53842.119397206159, 53840.878190264455, 53834.162983977512, 53828.38321097476, 53828.38321097476, 53814.70125177523, 53814.70125177523, 53814.70125177523, 53807.940365717513, 53791.420951764783, 53730.362795895126, 53730.362795895126, 53735.421378168016, 53735.421378168016, 53699.772274595161, 53688.694823376863, 53688.290828207741, 53681.634955992136, 53681.634955992136, 53681.634955992136, 53681.634955992136, 53674.385483652819, 53674.385483652819, 53677.614409226415, 53674.369160992428, 53674.369160992428, 53650.690734228163, 53650.690734228163, 53631.438292345163, 53612.334215701703, 53612.334215701703, 53612.334215701703, 53612.334215701703, 53584.568526468196, 53589.138902754697, 53596.73912349873, 53596.73912349873, 53590.06260845832, 53590.06260845832, 53551.742607259483, 53548.570299875078, 53547.086399870212, 53549.80783460704, 53530.206670091415, 53496.610523302181, 53496.610523302181, 53496.610523302181, 53496.610523302181, 53496.610523302181, 53496.610523302181, 53487.066365268678, 53487.066365268678, 53487.066365268678, 53487.066365268678, 53486.626601059877, 53474.160673441031, 53463.387564463366, 53393.367722164883, 53385.693736717541, 53385.693736717541, 53382.189517927851, 53375.174174379252, 53375.174174379252, 53375.174174379252, 53374.365702525029, 53374.365702525029, 53374.365702525029, 53374.365702525029, 53367.929619977294, 53360.438436783123, 53360.438436783123, 53360.438436783123, 53360.438436783123, 53360.438436783123, 53360.438436783123, 53356.221238487647, 53356.221238487647, 53356.221238487647, 53356.221238487647, 53356.221238487647, 53336.514144637447, 53296.100081649201, 53240.488651998588, 53240.488651998588, 53210.105819956487, 53210.105819956487, 53210.105819956487, 53151.329817702645, 53130.042859596186, 53133.868654374033, 53133.682724004917, 53125.424663592799, 53125.120961098262, 53125.424663592799, 53125.120961098262, 53125.120961098262, 53125.120961098262, 53125.120961098262, 53129.708459307454, 53129.708459307454, 53129.708459307454, 53129.708459307454, 53129.708459307454, 53129.708459307454, 53124.473690413826, 53098.089298007137, 53106.486090648497, 53106.486090648497, 53106.486090648497, 53106.486090648497, 53069.915837513297, 53069.915837513297, 53069.915837513297, 53052.758986052751, 53057.496250684242, 53018.283924366173, 53018.283924366173, 53018.283924366173, 52991.048085296265, 52991.048085296265, 52991.048085296265, 52991.048085296265, 52991.048085296265, 52981.150072388147, 52995.385839291383, 52995.385839291383, 52992.489432387592, 52992.489432387592, 52992.489432387592, 52998.645330228144, 52998.645330228144, 52998.645330228144, 52998.018184739645, 52998.018184739645, 52963.072703427679, 52963.072703427679, 52963.072703427679, 52963.072703427679, 52906.72794382296, 52906.727943822974, 52906.727943822974, 52903.733982126985, 52903.733982126985, 52926.055075954224, 52926.055075954224, 52908.297191277816, 52908.297191277816, 52908.297191277816, 52908.297191277816, 52898.677529817709, 52898.677529817709, 52898.677529817709, 52898.677529817709, 52898.677529817709, 52898.677529817709, 52888.272779855077, 52888.272779855077, 52888.272779855077, 52888.272779855077, 52867.344741207518, 52889.769056231933, 52886.0929457741, 52886.0929457741, 52886.0929457741, 52886.0929457741, 52886.0929457741, 52886.0929457741, 52886.0929457741, 52886.0929457741, 52886.0929457741, 52882.715935497166, 52868.970953782904, 52869.95293236729, 52817.926477553323, 52815.543544809931, 52807.803246096257, 52807.763632757153, 52767.784149474217, 52729.026667693368, 52729.026667693368, 52729.026667693368, 52666.552448539238, 52650.659744062621, 52625.502239449081, 52619.809343651068, 52617.911910584968, 52617.911910584968, 52617.911910584968, 52617.911910584968, 52617.911910584968, 52584.199250871505, 52584.199250871505, 52584.199250871505, 52577.740461899361, 52577.740461899361, 52577.740461899361, 52577.740461899361, 52577.740461899361, 52535.58308533841, 52528.229724538862, 52521.918852451476, 52501.981516247557, 52501.981516247557, 52482.551341594633, 52482.459744714768, 52482.459744714768, 52478.380844128988, 52478.380844128988, 52454.973517573904, 52449.102257886203, 52449.102257886203, 52430.690116359794, 52430.690116359794, 52430.690116359794, 52430.690116359794, 52430.690116359794, 52369.41311841397, 52369.41311841397, 52369.41311841397, 52365.89422849378, 52365.89422849378, 52365.89422849378, 52365.89422849378, 52365.89422849378, 52364.814553091142, 52364.814553091142, 52364.814553091142, 52358.572411466477, 52358.572411466477, 52358.572411466477, 52344.772416334556, 52303.702972729414, 52308.34246810418, 52306.061399328901, 52306.061399328901, 52306.061399328901, 52306.061399328901, 52292.503279685567, 52292.503279685567, 52292.503279685581, 52292.503279685567, 52292.503279685581, 52292.503279685581, 52292.503279685581, 52292.503279685581, 52292.503279685581, 52292.503279685581, 52292.503279685581, 52292.503279685581, 52292.503279685581, 52292.503279685581, 52292.503279685581, 52285.065651562691, 52285.065651562691, 52285.065651562691, 52285.065651562691, 52267.467684097865, 52267.467684097865, 52267.467684097865, 52267.467684097865, 52221.073312715947, 52221.073312715947, 52189.308303648417, 52189.308303648417, 52189.308303648417, 52188.773968799753, 52154.811653552199, 52157.351975417405, 52157.351975417405, 52157.351975417405, 52157.351975417405, 52152.99748803633, 52152.297311219969, 52152.297311219969, 52144.57189033585, 52144.57189033585, 52144.57189033585, 52144.57189033585, 52141.500194838343, 52132.549769266043, 52120.552081161659, 52120.552081161659, 52120.552081161659, 52120.552081161659, 52120.552081161659, 52100.839894722973, 52075.281833465982, 52075.281833465982, 52075.281833465982, 52075.281833465982, 52075.281833465982, 52075.245999940409, 52075.245999940409, 52075.245999940409, 52075.245999940409, 52069.725896085467, 52026.698607372789, 52026.698607372789, 52026.698607372789, 52026.698607372789, 52026.698607372789, 52026.698607372789, 52026.698607372789, 52033.950734957834, 51960.653191448349, 51950.776826447196, 51950.776826447196, 51941.863505500238, 51941.863505500238, 51941.863505500238, 51941.863505500238, 51941.863505500238, 51912.405696997652, 51910.790562698356, 51910.790562698356, 51910.790562698356, 51910.362517890739, 51906.681439053966, 51906.681439053966, 51906.681439053966, 51906.681439053966, 51883.343562477297, 51885.494876079552, 51876.703081219282, 51837.112090763898, 51837.112090763898, 51837.112090763898, 51837.437546157889, 51837.437546157889, 51770.728080297791, 51770.728080297791, 51770.728080297791, 51770.728080297791, 51770.728080297791, 51752.331031112233, 51752.331031112233, 51752.331031112233, 51731.709480540623, 51702.700673461615, 51702.700673461615, 51696.153450190461, 51696.153450190461, 51696.153450190461, 51700.352673750538, 51683.898829198013, 51683.898829198013, 51665.453081212057, 51676.36708082955, 51673.074201377989, 51673.074201377989, 51673.074201377989, 51657.536226489516, 51635.955383419197, 51635.955383419197, 51629.073465681562, 51629.073465681562, 51629.073465681562, 51618.480745913948, 51618.33690650206, 51618.33690650206, 51579.689434992702, 51579.689434992702, 51568.676978949137, 51568.676978949137, 51568.676978949137, 51568.676978949137, 51568.676978949137, 51568.676978949137, 51546.608393430368, 51546.608393430368, 51502.232010450585, 51459.582900192952, 51441.532753978499, 51439.717873450136, 51429.502112870301, 51407.206388421619, 51407.206388421626]
    data = [714794.65972340573, 714740.68229323556, 714629.38379389932, 714460.92352010729, 714289.20836627285, 714233.94578752061, 714066.48503564845, 713887.14151250897, 713757.90205763001, 713553.20048014296, 713390.49070652749, 713141.58337075065, 712989.68650059483, 712784.66337317217, 712624.03944132873, 712384.51518845197, 712241.20797013107, 712025.53161377856, 711838.43708910572, 711698.60899287369, 711552.82255541324, 711332.40972839878, 711146.46265290631, 710949.44113791874, 710839.12331362546, 710612.83787120797, 710423.50172021193, 710156.64328593481, 709970.17037774867, 709814.68247906899, 709662.31728157715, 709476.00641342881, 709322.31534227671, 709085.80221762182, 708922.98161746422, 708723.31655147998, 708569.04004231351, 708398.23538472108, 708181.19698171865, 708088.41344781441, 707895.86419349303, 707751.9725500067, 707658.45699651749, 707529.76956594898, 707342.76050270337, 707175.8269001575, 706977.25279482827, 706767.18184081907, 706472.21142200066, 706318.40337470779, 706142.27585831948, 705994.04499875056, 705827.31694535015, 705719.40540846006, 705605.97151381453, 705459.92078860453, 705348.09327248053, 705177.03237569367, 705026.48025419656, 704856.5118453434, 704660.0657190003, 704469.10501974821, 704316.16208786913, 704122.01054844446, 703992.20118814963, 703810.38920618582, 703649.779060359, 703377.91635551851, 703246.53380219825, 703086.30264068081, 702860.01914159779, 702704.85616351152, 702560.4216130682, 702405.5709755359, 702295.73077301844, 702019.00629809848, 701875.36120009597, 701710.64744754229, 701502.68861235352, 701342.11352532823, 701133.87976505933, 700945.60321824299, 700776.08818289428, 700554.74313840864, 700275.74349661078, 700129.11400719476, 699966.6647553267, 699808.75433122634, 699665.73995512829, 699456.01094267075, 699289.24994115566, 699198.62040061411, 699021.91373587609, 698794.03767276253, 698611.29139943351, 698423.83708217053, 698334.75876788236, 698164.58619075129, 698025.58867304714, 697799.90386013838, 697583.38985765493, 697309.1512378325, 697190.74820285675, 697075.74611464795, 696868.12787531503, 696769.38607945363, 696501.13802201324, 696333.14748190343, 696069.11279764445, 695811.85980172397, 695688.67799570994, 695467.15078328678, 695258.39386721491, 695092.21171490347, 694976.66336402332, 694784.26097952982, 694531.6955155672, 694379.13612516865, 694260.89663924288, 694141.42897698423, 693892.67192602018, 693689.15406973206, 693588.88277165801, 693427.33623479237, 693291.59057927225, 693157.8295789446, 693043.41019764764, 692838.08634834271, 692630.99955957977, 692483.87124733801, 692375.47836990759, 692124.69412607339, 691893.00464281277, 691785.5457793863, 691624.35113367718, 691442.12097072788, 691332.22245527105, 691158.98058371572, 690943.54561347724, 690750.67729002412, 690595.46031931252, 690313.89557430323, 690135.1008093101, 689979.2223435468, 689785.9425024346, 689638.15822473995, 689543.85906786832, 689414.16649735998, 689232.77864699333, 689071.98365196341, 688854.95034134027, 688727.47248186986, 688496.15959673049, 688320.8395174928, 688113.04552052682, 687938.77833585825, 687752.53027601284, 687567.55262747582, 687396.80498549447, 687224.58203634934, 686991.72244458797, 686779.93059203401, 686606.63612131192, 686453.04758939124, 686272.18419971224, 686119.84485082468, 685946.08185699803, 685767.86235508835, 685616.48516623012, 685463.83783945418, 685340.0951058385, 685216.92095206853, 685101.75138221018, 684985.87831314583, 684735.88987942343, 684601.63393537956, 684410.50530580559, 684293.91499804927, 684121.58068110759, 683985.5000845833, 683828.18412191013, 683630.15803808754, 683474.05511087237, 683332.50454057835, 683161.20668131975, 683048.70268761856, 682998.70282799611, 682744.22313027724, 682558.94003573107, 682416.57902590511, 682245.68589413189, 682024.07054916664, 681868.24436052213, 681766.24273134628, 681662.96248091618, 681506.16910232895, 681406.32330315956, 681232.96876775823, 681093.42672957224, 680951.35627931717, 680724.09368994879, 680570.38786260539, 680475.83245939738, 680297.48129781499, 680135.09675242682, 679972.43919564772, 679886.35689428798, 679760.14160716033, 679583.26773147169, 679449.65255189408, 679309.96208507253, 679083.11596208764, 678791.10036234302, 678609.64294191869, 678395.54020407295, 678244.18306569406, 678063.37248807389, 677845.42951724061, 677649.64991189074, 677450.79664751783, 677238.32549059496, 677085.0890924409, 677012.62368464528, 676928.57426561334, 676762.72458876506, 676661.36682746268, 676487.3444692085, 676292.39788990375, 676187.02495787095, 676012.43696297053, 675801.52525553072, 675667.51073592308, 675493.61271694116, 675360.66350113263, 675091.33927788818, 674932.68557055667, 674741.17956423096, 674614.20123051619, 674477.88959587668, 674343.0796760472, 674174.83183256804, 673929.08668089751, 673805.07485019777, 673540.21968827501, 673352.56913406716, 673167.49911777955, 673004.49880041624, 672865.04062835407, 672587.2940699266, 672422.50754710112, 672177.15093623509, 672030.69606240245, 671893.81022105983, 671717.15377213398, 671464.93949671369, 671325.34797773871, 671116.90349789674, 670956.48738777055, 670763.28605093644, 670544.14164157317, 670410.19099457515, 670175.73336416169, 670051.69584501698, 669892.56490485382, 669682.36199970171, 669536.91882900475, 669375.96844440477, 669102.09139133454, 668802.24238395272, 668638.76849250577, 668420.83645329764, 668221.02730561898, 667964.44533939811, 667772.93001745292, 667621.27179986879, 667450.44856738206, 667262.64408094902, 667106.27439275407, 666897.73016571056, 666712.00150094903, 666458.86565828277, 666273.27921693469, 666037.15416115185, 665912.8234586051, 665743.31945076375, 665602.10905590525, 665406.41838892514, 665285.63661262416, 665112.11955450301]


    x = range(len(data))
    plt.plot(x, data)
    plt.plot(x, [data[0]] * len(data))
    # plt.plot(x, [11448.5257358] * len(data))

    plt.ylim([0, 750000])
    plt.ylabel("Expected fuel consumption")
    plt.xlabel("Time")
    plt.xticks([6 * i for i in range(0, 49, 5)], [str(i) + "h" for i in range(0, 49, 5)])
    plt.legend(['Adapted plans', 'Default plan'])
    plt.show()

def plot_platoon_perc_graph():
    data = [0.0, 0.0, 0.0, 0.0, 0.0, 0.058823529411764705, 0.047619047619047616, 0.07692307692307693, 0.16666666666666666, 0.16666666666666666, 0.16129032258064516, 0.14705882352941177, 0.08108108108108109, 0.11904761904761904,     0.09090909090909091, 0.09090909090909091, 0.0851063829787234, 0.0392156862745098, 0.12, 0.13725490196078433,     0.12962962962962962, 0.125, 0.14035087719298245, 0.15254237288135594, 0.16071428571428573, 0.14285714285714285,     0.15254237288135594, 0.1864406779661017, 0.22033898305084745, 0.2, 0.15517241379310345, 0.19672131147540983,     0.18461538461538463, 0.13846153846153847, 0.19672131147540983, 0.21311475409836064, 0.21311475409836064,     0.20634920634920634, 0.23076923076923078, 0.2153846153846154, 0.1875, 0.171875, 0.208955223880597,     0.14925373134328357, 0.20588235294117646, 0.19718309859154928, 0.136986301369863, 0.17142857142857143,     0.15492957746478872, 0.1527777777777778, 0.18055555555555555, 0.21739130434782608, 0.22535211267605634,     0.22535211267605634, 0.19718309859154928, 0.22535211267605634, 0.22058823529411764, 0.2, 0.18571428571428572,     0.18055555555555555, 0.18055555555555555, 0.2361111111111111, 0.18181818181818182, 0.2077922077922078,     0.2564102564102564, 0.20512820512820512, 0.22077922077922077, 0.20270270270270271, 0.22666666666666666, 0.24,     0.2077922077922078, 0.17567567567567569, 0.18055555555555555, 0.22535211267605634, 0.20270270270270271,     0.19736842105263158, 0.16883116883116883, 0.21794871794871795, 0.22784810126582278, 0.15789473684210525,     0.2236842105263158, 0.23943661971830985, 0.24, 0.21518987341772153, 0.17721518987341772, 0.20512820512820512,     0.18181818181818182, 0.21052631578947367, 0.24324324324324326, 0.2054794520547945, 0.2, 0.19444444444444445,0.22388059701492538, 0.21739130434782608, 0.22727272727272727, 0.17142857142857143, 0.22058823529411764,     0.14666666666666667, 0.1780821917808219, 0.15384615384615385, 0.1125, 0.14285714285714285, 0.13414634146341464,     0.14814814814814814, 0.1625, 0.12048192771084337, 0.10843373493975904, 0.10843373493975904, 0.12658227848101267,     0.1625, 0.18181818181818182, 0.1625, 0.18518518518518517, 0.18518518518518517, 0.20253164556962025,     0.20987654320987653, 0.2, 0.15853658536585366, 0.1951219512195122, 0.19767441860465115, 0.21176470588235294,     0.1978021978021978, 0.17894736842105263, 0.17647058823529413, 0.1650485436893204, 0.17475728155339806,     0.16666666666666666, 0.17142857142857143, 0.21359223300970873, 0.1717171717171717, 0.19791666666666666,     0.2376237623762376, 0.23076923076923078, 0.21904761904761905, 0.20754716981132076, 0.24509803921568626,     0.2549019607843137, 0.25773195876288657, 0.29591836734693877, 0.3020833333333333, 0.30927835051546393,     0.2916666666666667, 0.2736842105263158, 0.28125, 0.28421052631578947, 0.29473684210526313, 0.2872340425531915,     0.29347826086956524, 0.2777777777777778, 0.2553191489361702, 0.2608695652173913, 0.21839080459770116,     0.21176470588235294, 0.23076923076923078, 0.20987654320987653, 0.20987654320987653, 0.1724137931034483,     0.1839080459770115, 0.12195121951219512, 0.13095238095238096, 0.1375, 0.125, 0.1282051282051282, 0.125,     0.14285714285714285, 0.19736842105263158, 0.23684210526315788, 0.2125, 0.20987654320987653, 0.1927710843373494,     0.20987654320987653, 0.2345679012345679, 0.21951219512195122, 0.21794871794871795, 0.19753086419753085,     0.23684210526315788, 0.2236842105263158, 0.24358974358974358, 0.2597402597402597, 0.2716049382716049,     0.25925925925925924, 0.21428571428571427, 0.23809523809523808, 0.23529411764705882, 0.24096385542168675,     0.20987654320987653, 0.2073170731707317, 0.2345679012345679, 0.24096385542168675, 0.25609756097560976, 0.25,     0.21951219512195122, 0.25, 0.2441860465116279, 0.26506024096385544, 0.25, 0.2804878048780488, 0.2558139534883721,     0.24705882352941178, 0.22988505747126436, 0.20454545454545456, 0.20454545454545456, 0.2, 0.2, 0.2222222222222222,     0.21686746987951808, 0.20987654320987653, 0.18292682926829268, 0.1744186046511628, 0.17045454545454544,     0.20987654320987653, 0.175, 0.2236842105263158, 0.1917808219178082, 0.19696969696969696, 0.23333333333333334, 0.25,     0.2, 0.2, 0.2, 0.18518518518518517, 0.16071428571428573, 0.13793103448275862, 0.13333333333333333,     0.12903225806451613, 0.078125, 0.140625, 0.1, 0.1111111111111111, 0.1232876712328767, 0.14285714285714285,     0.14666666666666667, 0.14473684210526316, 0.18309859154929578, 0.21794871794871795, 0.23076923076923078,     0.1927710843373494, 0.20481927710843373, 0.21686746987951808, 0.18823529411764706, 0.2125, 0.20987654320987653,     0.2345679012345679, 0.2875, 0.3116883116883117, 0.2948717948717949, 0.34210526315789475, 0.3611111111111111,     0.3246753246753247, 0.2987012987012987, 0.2948717948717949, 0.2857142857142857, 0.23076923076923078,     0.21794871794871795, 0.15492957746478872, 0.18055555555555555, 0.14925373134328357, 0.15714285714285714,     0.17142857142857143, 0.125, 0.17105263157894737, 0.1686746987951807, 0.20481927710843373, 0.17073170731707318,     0.14634146341463414, 0.15476190476190477, 0.1951219512195122, 0.19047619047619047, 0.18823529411764706,     0.18823529411764706, 0.16091954022988506, 0.19318181818181818, 0.2159090909090909, 0.24705882352941178,     0.20689655172413793, 0.18823529411764706, 0.21686746987951808, 0.20238095238095238, 0.20238095238095238,     0.19767441860465115, 0.1839080459770115, 0.15555555555555556, 0.15384615384615385, 0.19148936170212766,     0.1935483870967742, 0.1956521739130435, 0.16853932584269662, 0.20224719101123595]
    data = [x*100 for x in data]
    x = range(len(data))
    plt.plot(x, data)
    # plt.plot(x, [data[0]] * len(data))
    # plt.plot(x, [11448.5257358] * len(data))

    plt.ylim([0, 100])
    plt.xlim([0,300])
    plt.xticks([6 * i for i in range(0, 49, 5)], [str(i) + "h" for i in range(0, 49, 5)])
    plt.ylabel("Percentage of active trucks following adapted plans")
    plt.xlabel("Time")
    plt.show()



def plot_avg_platoon_time_graph():
    data = [[8111.32120833, 6062.16710393],[8209.18331296,6103.92309649],[7340.79646793,5125.55125434],[4811.30066905,2068.8262203]]
    pos = list(range(len(data)))
    width = 0.25
    fig, ax = plt.subplots(figsize=(10, 5))

    plt.bar(pos, [x[0] for x in data], width, label="All trucks")
    plt.bar([x+width for x in pos], [x[1] for x in data], width, label="Platooning trucks")
    plt.legend(['All trucks', "Platooning trucks"])
    # Set the position of the x ticks
    ax.set_xticks([p + 0.5 * width for p in pos])

    # Set the labels for the x ticks
    ax.set_xticklabels(["Greedy","Random","Deterministic\nSub-modularity","Stochastic\nSub-modularity"])
    plt.ylabel("Average platoon length (seconds)")
    plt.show()


def plot_active_graph():
    data1 = [0, 32, 65, 101, 131, 154, 186, 219, 246, 268, 296, 327, 352, 380, 409, 436, 463, 494, 519, 539, 558, 581, 602, 618, 624, 639, 661, 684, 678, 687, 702, 709, 716, 742, 750, 774, 788, 783, 795, 795, 803, 800, 804, 793, 802, 783, 782, 789, 796, 812, 811, 803, 817, 803, 796, 794, 781, 786, 788, 782, 780, 787, 788, 781, 783, 780, 778, 782, 773, 769, 761, 751, 741, 728, 730, 741, 737, 739, 742, 737, 743, 747, 754, 770, 783, 769, 781, 776, 763, 772, 780, 781, 782, 789, 799, 801, 780, 769, 766, 784, 795, 788, 782, 781, 778, 783, 789, 789, 809, 816, 812, 805, 809, 813, 808, 795, 803, 807, 805, 800, 799, 790, 793, 805, 799, 803, 801, 809, 809, 810, 804, 812, 820, 810, 813, 809, 794, 803, 789, 797, 786, 787, 791, 783, 777, 770, 764, 757, 750, 758, 755, 742, 749, 750, 747, 757, 757, 752, 748, 751, 765, 774, 773, 778, 774, 777, 785, 780, 789, 800, 788, 787, 779, 777, 791, 779, 776, 770, 770, 768, 768, 773, 762, 760, 769, 756, 742, 741, 742, 745, 737, 744, 739, 740, 726, 725, 723, 711, 709, 716, 728, 730, 721, 727, 729, 728, 718, 724, 724, 726, 723, 742, 760, 757, 765, 767, 763, 755, 753, 750, 755, 754, 757, 734, 741, 734, 741, 757, 767, 765, 770, 747, 743, 731, 745, 748, 757, 766, 752, 746, 752, 762, 755, 768, 774, 770, 768, 787, 794, 785, 801, 806, 803, 799, 796, 788, 797, 803, 804, 814, 818, 833, 826, 824, 818, 817, 824, 837, 838, 831, 827, 838, 854, 844, 829, 833, 830, 823, 821, 819, 829, 837, 844, 835, 839, 843, 853, 853, 849]
    data2 = [0, 32, 65, 92, 126, 154, 194, 219, 249, 271, 302, 325, 335, 351, 368, 399, 423, 446, 460, 482, 502, 531, 552, 562, 589, 604, 613, 626, 630, 633, 638, 667, 673, 664, 671, 682, 686, 704, 708, 711, 731, 736, 746, 740, 740, 743, 740, 746, 754, 772, 763, 777, 776, 771, 781, 782, 772, 771, 787, 773, 757, 746, 746, 747, 733, 739, 732, 738, 724, 733, 737, 736, 736, 736, 733, 728, 732, 733, 740, 738, 750, 761, 767, 771, 772, 765, 765, 756, 768, 764, 753, 742, 744, 745, 743, 735, 732, 733, 733, 744, 745, 751, 757, 757, 760, 767, 760, 746, 738, 761, 770, 777, 791, 789, 772, 771, 778, 778, 773, 776, 771, 768, 763, 760, 775, 777, 774, 778, 771, 766, 769, 772, 788, 800, 803, 802, 796, 800, 797, 785, 787, 789, 787, 780, 791, 785, 782, 776, 793, 794, 812, 818, 815, 816, 812, 814, 833, 817, 827, 809, 817, 821, 809, 809, 820, 822, 818, 810, 799, 794, 796, 800, 798, 811, 812, 812, 805, 797, 791, 787, 791, 788, 794, 786, 787, 782, 788, 780, 768, 768, 771, 782, 805, 812, 825, 822, 829, 824, 826, 839, 846, 844, 835, 836, 835, 843, 828, 825, 801, 791, 786, 793, 790, 787, 790, 778, 774, 772, 773, 782, 778, 769, 767, 767, 774, 786, 787, 800, 801, 803, 799, 787, 774, 781, 767, 763, 763, 778, 785, 775, 797, 797, 798, 797, 793, 797, 797, 811, 796, 790, 791, 795, 782, 785, 778, 773, 774, 769, 772, 772, 775, 762, 760, 763, 764, 761, 764, 765, 760, 765, 769, 780, 782, 792, 799, 809, 814, 799, 799, 776, 781, 786, 778, 777, 770, 770, 776, 782, 779]
    data3 = [0, 28, 64, 98, 131, 165, 189, 210, 239, 267, 300, 324, 350, 374, 395, 437, 465, 483, 500, 522, 537, 558, 567, 576, 589, 610, 644, 658, 680, 696, 696, 713, 733, 734, 730, 740, 738, 756, 774, 769, 779, 779, 783, 798, 808, 800, 799, 799, 810, 811, 817, 780, 767, 769, 767, 767, 775, 769, 771, 785, 783, 775, 783, 778, 773, 779, 774, 777, 770, 768, 762, 771, 784, 779, 786, 790, 786, 780, 787, 791, 815, 818, 812, 805, 821, 815, 807, 807, 802, 793, 801, 793, 788, 788, 778, 781, 778, 759, 756, 762, 767, 760, 768, 773, 780, 782, 779, 775, 768, 753, 757, 752, 750, 737, 752, 741, 744, 740, 736, 735, 741, 740, 750, 752, 760, 773, 765, 765, 764, 763, 762, 764, 767, 764, 767, 771, 786, 793, 812, 819, 809, 815, 804, 800, 791, 792, 793, 785, 782, 774, 773, 764, 766, 760, 756, 772, 782, 773, 779, 788, 770, 774, 770, 778, 780, 773, 776, 776, 790, 785, 777, 780, 786, 773, 771, 760, 754, 773, 776, 769, 773, 774, 773, 791, 783, 788, 789, 785, 797, 799, 812, 825, 814, 814, 816, 803, 805, 794, 789, 791, 796, 795, 784, 784, 786, 792, 803, 804, 795, 784, 770, 758, 768, 766, 766, 757, 749, 746, 750, 731, 714, 727, 726, 727, 717, 722, 712, 708, 714, 708, 720, 741, 732, 739, 755, 751, 759, 761, 756, 759, 757, 763, 763, 759, 770, 756, 778, 792, 786, 801, 818, 814, 816, 820, 813, 804, 801, 779, 777, 777, 781, 776, 784, 773, 783, 783, 787, 785, 787, 788, 782, 782, 775, 774, 778, 793, 788, 789, 786, 787, 792, 795, 806, 800, 788, 777, 782, 787, 777]
    data4 = [0, 34, 73, 107, 134, 162, 192, 224, 245, 268, 292, 314, 347, 369, 388, 403, 423, 436, 465, 480, 498, 525, 541, 557, 586, 600, 615, 641, 642, 656, 682, 698, 704, 709, 714, 723, 730, 741, 745, 738, 736, 745, 748, 748, 764, 770, 766, 762, 766, 758, 752, 742, 747, 747, 745, 750, 755, 759, 760, 770, 774, 795, 798, 815, 821, 839, 829, 824, 826, 834, 831, 835, 841, 838, 820, 827, 837, 832, 834, 836, 837, 843, 850, 864, 874, 878, 870, 873, 868, 867, 856, 856, 849, 834, 822, 823, 800, 806, 800, 790, 784, 790, 777, 767, 765, 757, 766, 781, 773, 781, 784, 776, 777, 782, 791, 795, 799, 791, 806, 810, 809, 817, 824, 825, 821, 815, 809, 817, 805, 792, 781, 769, 759, 769, 773, 772, 774, 793, 800, 806, 792, 793, 792, 779, 777, 780, 774, 780, 777, 772, 769, 767, 775, 777, 794, 789, 797, 793, 786, 789, 796, 799, 804, 796, 799, 806, 796, 797, 797, 787, 798, 785, 778, 769, 765, 767, 782, 771, 779, 774, 766, 761, 763, 763, 749, 751, 735, 748, 736, 732, 738, 731, 737, 736, 732, 735, 739, 755, 767, 773, 778, 756, 756, 760, 761, 754, 757, 751, 756, 745, 738, 732, 725, 727, 732, 745, 741, 745, 761, 768, 766, 770, 779, 775, 782, 781, 774, 770, 774, 783, 783, 777, 767, 767, 775, 776, 788, 790, 775, 799, 802, 786, 782, 777, 769, 777, 780, 775, 779, 779, 780, 769, 782, 776, 775, 778, 794, 797, 778, 784, 775, 765, 760, 752, 761, 763, 767, 765, 755, 750, 756, 769, 766, 765, 767, 774, 778, 781, 776, 775, 779, 785, 786, 785, 804, 802, 804, 785, 779]
    data5 = [0, 38, 67, 116, 140, 165, 193, 214, 240, 273, 317, 341, 363, 396, 431, 449, 489, 507, 533, 553, 559, 583, 598, 614, 619, 634, 655, 668, 695, 699, 708, 735, 736, 739, 752, 755, 762, 762, 770, 768, 789, 785, 781, 786, 802, 808, 802, 801, 799, 805, 811, 806, 796, 788, 784, 775, 771, 776, 791, 805, 797, 793, 806, 805, 802, 811, 796, 792, 785, 789, 797, 785, 797, 793, 788, 790, 780, 788, 779, 774, 774, 773, 767, 761, 766, 759, 759, 757, 743, 749, 750, 758, 753, 772, 779, 773, 772, 754, 749, 748, 743, 740, 757, 737, 734, 739, 735, 740, 739, 757, 739, 739, 731, 739, 736, 727, 742, 752, 752, 738, 742, 744, 737, 722, 740, 744, 738, 740, 722, 717, 707, 702, 716, 734, 724, 727, 737, 747, 743, 735, 742, 764, 771, 770, 766, 780, 764, 779, 774, 769, 778, 789, 798, 791, 802, 810, 826, 828, 838, 834, 826, 819, 818, 823, 813, 808, 805, 809, 809, 801, 800, 806, 819, 825, 811, 805, 811, 818, 805, 803, 812, 830, 829, 822, 815, 809, 804, 792, 783, 771, 760, 738, 734, 731, 736, 742, 756, 749, 742, 750, 743, 737, 736, 732, 745, 736, 735, 745, 736, 747, 742, 742, 741, 748, 760, 761, 755, 757, 764, 750, 745, 746, 743, 752, 767, 773, 766, 770, 777, 784, 790, 791, 781, 795, 791, 796, 790, 782, 785, 785, 792, 785, 783, 772, 765, 752, 749, 742, 738, 733, 741, 744, 766, 770, 780, 778, 763, 779, 773, 769, 781, 791, 791, 786, 779, 771, 760, 771, 773, 779, 778, 784, 781, 756, 750, 767, 773, 771, 775, 763, 772, 759, 755, 757, 764, 764, 763, 750, 763]
    x = range(len(data1))
    plt.plot(x, data1)
    plt.plot(x, data2)
    plt.plot(x, data3)
    plt.plot(x, data4)
    plt.plot(x, data5)
    plt.xlim([0,289])
    # plt.plot(x, [11448.5257358] * len(data))
    plt.xticks([6 * i for i in range(0, 49, 5)], [str(i) + "h" for i in range(0, 49, 5)])
    plt.ylabel("Active trucks")
    plt.xlabel("Time")
    plt.show()


def plot_horizon_graph():
    # data = [[0.04257685171991539, 0.043240624726071999, 0.042726363999243497, 0.042461843775266205, 0.041792827797636156, 0.041120199915871056, 0.041999790590254646, 0.041253700563820606, 0.041890863284667089, 0.042822045450078727, 0.043330085501208628, 0.041593369411016656, 0.041235595812267788, 0.041579141839865039, 0.042234671565046636, 0.041690283970487643, 0.041440025488240793, 0.040767679356238332, 0.041271149742330128, 0.041111206360194094, 0.041338689270989756, 0.041211539802186482, 0.042289560909163734, 0.040935053585119709, 0.041917145340909956], [0.038286281860540193, 0.037635498642601871, 0.038263970382947578, 0.036912435043820115, 0.038093780213181973, 0.038112958290865737, 0.038334145630736338, 0.036837403568618088, 0.038566928481584009, 0.039938299213352638, 0.03913802320049118, 0.038274408779102667, 0.03628575084089878, 0.036519171596552227, 0.038117506852366236, 0.039389165412633355, 0.039099987591722417, 0.040302105135019327, 0.041091322802924247, 0.040254232051881209, 0.040175147556484839, 0.040742244558931121, 0.040993132274765268, 0.041429333208759744, 0.041135842253129627], [0.039543045048311784, 0.040069445897934951, 0.039476473615592457, 0.040179646928607607, 0.039041021588396486, 0.039611477375396539, 0.040886617605510288, 0.038113349569262336, 0.03851757057545073, 0.040307779437964909, 0.040671176213001578, 0.039716123271036664, 0.038225025025876012, 0.037289082039978494, 0.039011776947156872, 0.039791978242690741, 0.040026939490590441, 0.04017011333443947, 0.041083505808621926, 0.039996608035952216, 0.040695624806885024, 0.039895289094308464, 0.039392516356696716, 0.039386041413067674, 0.037824491964886332], [0.038288638135185481, 0.03880443794836512, 0.038985048766235916, 0.03834217972777465, 0.038769213224278801, 0.036741154112205618, 0.03741468814216202, 0.037636448677803649, 0.037610728526537331, 0.039732536794915951, 0.039452568167468824, 0.038440363808861157, 0.037835331257484325, 0.038316757269082548, 0.038471953883773405, 0.039515519778140475, 0.039840215678517851, 0.039162487573239299, 0.037765401338263539, 0.03861315608843361, 0.038650355357199274, 0.038708629254534797, 0.040081480548290818, 0.039141583776356237, 0.039604264753606656]]
    data = [0.069183374727494668, 0.070745800611422285, 0.071330390642396588, 0.072004260523470504, 0.072386696040847617, 0.07276342288049438, 0.072823564667295421, 0.073240408592274805, 0.073410529320973028, 0.073572515856747372, 0.073743593836799293, 0.07383433376098289, 0.073891669637863616, 0.073967751540942636, 0.07407080983042931, 0.074013002442914505, 0.074062041565706477, 0.074169507895545175, 0.074229251350360292, 0.074229915278955325, 0.074325620090872319, 0.074379045197323815, 0.074435472351458351, 0.074468268437553831, 0.074521486518274463]

    x = range(len(data))
    plt.plot(x, data)
    # plt.plot(x, data[1])
    # plt.plot(x, data[2])
    # plt.plot(x, data[3])
    # plt.plot((-10, 27), (0, 0), 'k-')
    plt.xlim([0,24])
    plt.ylim([0.06,0.08])
    plt.title("Impact of horizon length")
    plt.ylabel("Fuel savings")
    plt.xlabel("Horizon length")
    plt.xticks([6, 12, 18, 24], ["30m", "1h", "1.5h", "2h"])

    # plt.legend(['Greedy', 'Random', "Deterministic\nsub modularity", "Stochastic\nsub modularity"], loc='lower left')
    plt.show()


def plot_interval_graph():
    data = [0.069183374727494668, 0.068060368224679688, 0.066745341712359754, 0.065508475992190757, 0.064031172930302166, 0.062871468006136438, 0.06142477038161067, 0.060376318207659228, 0.058873110878434207, 0.058023634108685961, 0.056623220746578731, 0.055353949901388644]


    x = range(len(data))
    a = plt.plot(x, data)
    # b = plt.plot(x, data[1])
    # c = plt.plot(x, data[2])
    # d = plt.plot(x, data[3])
    # plt.plot((-10, 27), (0, 0), 'k-')
    plt.xlim([0,11])
    plt.ylim([0, 0.1])
    plt.title("Impact of interval length")
    plt.ylabel("Fuel savings")
    plt.xlabel("Interval length")
    plt.xticks([2, 5, 8, 11], ["30m", "1h", "1.5h", "2h"])

    # plt.legend(['Greedy', 'Random', "Deterministic\nsub modularity", "Stochastic\nsub modularity"])
    plt.show()


def plot_clustering_savings_graph():
    # y = clustering_data()
    y = [0.069183374727494668, 0.06886248108850572, 0.061555225260905531, 0.059748327675762679]
    labels = ["%.2f%%" % (y[0]*100), "%.2f%%" % (y[1]*100), "%.2f%%" % (y[2]*100), "%.2f%%" % (y[3]*100)]
    N = len(y)
    x = range(N)
    # ["a","b","c","d"]
    width = 1 / 1.5
    colors = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728']
    bars = plt.bar(x, y, width, alpha=0.8, color=colors)
    for a, b in zip(x, y):
        plt.text(a, b + 0.005, labels[a], ha='center', va='bottom')
    # plt.tight_layout()
    plt.ylim([0, 0.1])
    plt.title("Clustering methods")
    plt.ylabel("Fuel savings")
    # plt.xlabel("Method")
    # plt.set_xticklabels()
    labels2 = ["Greedy", "Random", "Deterministic\nsub modularity", "Stochastic\nsub modularity"]
    plt.xticks(x, labels2)  # , rotation='vertical')
    plt.show()


if __name__ == "__main__":
    main()
